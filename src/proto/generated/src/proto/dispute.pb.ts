// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v5.29.3
// source: src/proto/dispute.proto

/* eslint-disable */
import { Metadata } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "disputes";

export interface OpenDisputeRequest {
  dealId: string;
  userId: string;
  reason: string;
}

export interface ResolveDisputeRequest {
  dealId: string;
  disputeId: string;
  resolution: string;
  moderatorId: string;
}

export interface GetDisputeByIdRequest {
  disputeId: string;
}

export interface GetDisputesByDealIdRequest {
  dealId: string;
}

export interface DisputeResponse {
  id: string;
  status: string;
  message: string;
}

export interface Dispute {
  id: string;
  dealId: string;
  openedBy: string;
  openedByRole: string;
  reason: string;
  status: string;
  resolvedAt: string;
  resolution: string;
  createdAt: string;
  updatedAt: string;
}

export interface GetDisputeByIdResponse {
  dispute: Dispute | undefined;
}

export interface GetDisputesByDealIdResponse {
  disputes: Dispute[];
}

export const DISPUTES_PACKAGE_NAME = "disputes";

export interface DisputesServiceClient {
  openDispute(request: OpenDisputeRequest, metadata?: Metadata): Observable<DisputeResponse>;

  resolveDispute(request: ResolveDisputeRequest, metadata?: Metadata): Observable<DisputeResponse>;

  getDisputeById(request: GetDisputeByIdRequest, metadata?: Metadata): Observable<GetDisputeByIdResponse>;

  getDisputesByDealId(
    request: GetDisputesByDealIdRequest,
    metadata?: Metadata,
  ): Observable<GetDisputesByDealIdResponse>;
}

export interface DisputesServiceController {
  openDispute(
    request: OpenDisputeRequest,
    metadata?: Metadata,
  ): Promise<DisputeResponse> | Observable<DisputeResponse> | DisputeResponse;

  resolveDispute(
    request: ResolveDisputeRequest,
    metadata?: Metadata,
  ): Promise<DisputeResponse> | Observable<DisputeResponse> | DisputeResponse;

  getDisputeById(
    request: GetDisputeByIdRequest,
    metadata?: Metadata,
  ): Promise<GetDisputeByIdResponse> | Observable<GetDisputeByIdResponse> | GetDisputeByIdResponse;

  getDisputesByDealId(
    request: GetDisputesByDealIdRequest,
    metadata?: Metadata,
  ): Promise<GetDisputesByDealIdResponse> | Observable<GetDisputesByDealIdResponse> | GetDisputesByDealIdResponse;
}

export function DisputesServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["openDispute", "resolveDispute", "getDisputeById", "getDisputesByDealId"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("DisputesService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("DisputesService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const DISPUTES_SERVICE_NAME = "DisputesService";
