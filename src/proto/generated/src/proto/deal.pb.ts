// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v5.29.3
// source: src/proto/deal.proto

/* eslint-disable */
import { Metadata } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "deal";

export interface SendHelloRequest {
  message: string;
}

export interface SendHelloResponse {
  message: string;
}

export interface CreateDealRequest {
  initiatorId: string;
  targetId: string;
  amount: number;
  description: string;
  isCustomerInitiator: boolean;
}

export interface AcceptDealRequest {
  dealId: string;
  userId: string;
}

export interface DealResponse {
  id: string;
  status: string;
  message: string;
}

export interface CancelDealRequest {
  dealId: string;
  userId: string;
  reason: string;
}

export interface ConfirmCompletionRequest {
  dealId: string;
  userId: string;
}

export interface OpenDisputeRequest {
  dealId: string;
  userId: string;
  reason: string;
}

export const DEAL_PACKAGE_NAME = "deal";

export interface DealServiceClient {
  createDeal(request: CreateDealRequest, metadata?: Metadata): Observable<DealResponse>;

  acceptDeal(request: AcceptDealRequest, metadata?: Metadata): Observable<DealResponse>;

  cancelDeal(request: CancelDealRequest, metadata?: Metadata): Observable<DealResponse>;

  confirmCompletion(request: ConfirmCompletionRequest, metadata?: Metadata): Observable<DealResponse>;

  /** rpc OpenDispute (OpenDisputeRequest) returns (DisputeResponse); */

  sendHello(request: SendHelloRequest, metadata?: Metadata): Observable<SendHelloResponse>;
}

export interface DealServiceController {
  createDeal(
    request: CreateDealRequest,
    metadata?: Metadata,
  ): Promise<DealResponse> | Observable<DealResponse> | DealResponse;

  acceptDeal(
    request: AcceptDealRequest,
    metadata?: Metadata,
  ): Promise<DealResponse> | Observable<DealResponse> | DealResponse;

  cancelDeal(
    request: CancelDealRequest,
    metadata?: Metadata,
  ): Promise<DealResponse> | Observable<DealResponse> | DealResponse;

  confirmCompletion(
    request: ConfirmCompletionRequest,
    metadata?: Metadata,
  ): Promise<DealResponse> | Observable<DealResponse> | DealResponse;

  /** rpc OpenDispute (OpenDisputeRequest) returns (DisputeResponse); */

  sendHello(
    request: SendHelloRequest,
    metadata?: Metadata,
  ): Promise<SendHelloResponse> | Observable<SendHelloResponse> | SendHelloResponse;
}

export function DealServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["createDeal", "acceptDeal", "cancelDeal", "confirmCompletion", "sendHello"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("DealService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("DealService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const DEAL_SERVICE_NAME = "DealService";
