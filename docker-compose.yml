version: '3.8'

services:
  # PostgreSQL database
  postgres:
    image: postgres:13
    container_name: garant_postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: garant
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - garant-network
    restart: unless-stopped

  # Kafka for event streaming
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    container_name: garant_zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - garant-network
    restart: unless-stopped

  kafka:
    image: confluentinc/cp-kafka:7.3.0
    container_name: garant_kafka
    depends_on:
      - zookeeper
    ports:
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    networks:
      - garant-network
    restart: unless-stopped

  # NestJS application
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: garant_app
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_started
    ports:
      - "4200:4200"
      - "50051:50051"
    env_file:
      - .env.docker
    volumes:
      - .:/app
      - /app/node_modules
    networks:
      - garant-network
    restart: unless-stopped
    # Uncomment the line below if you want to override the entrypoint
    # command: ["npm", "run", "dev"]

networks:
  garant-network:
    driver: bridge

volumes:
  postgres_data:










# services:
#   deal-service:
#     build: .
#     ports:
#       - "3000:3000"  # HTTP
#       - "50051:50051" # gRPC
#       - "3001:3001"  # WebSocket
#     environment:
#       - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/deal-service
#       - KAFKA_BROKER=kafka:9092
#       - JWT_SECRET=${JWT_SECRET}
#     depends_on:
#       - postgres
#       - kafka

#   postgres:
#     image: postgres:15
#     environment:
#       - POSTGRES_USER=postgres
#       - POSTGRES_PASSWORD=postgres
#       - POSTGRES_DB=deal-service
#     volumes:
#       - postgres_data:/var/lib/postgresql/data

#   zookeeper:
#     image: confluentinc/cp-zookeeper:7.4.0
#     environment:
#       ZOOKEEPER_CLIENT_PORT: 2181

#   kafka:
#     image: confluentinc/cp-kafka:7.4.0
#     depends_on:
#       - zookeeper
#     environment:
#       KAFKA_BROKER_ID: 1
#       KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
#       KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
#       KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'

# volumes:
#   postgres_data:









# # services:
# #   deal-service:
# #     build: .
# #     ports:
# #       - "3000:3000"
# #       - "3001:3001" # WebSocket
# #     environment:
# #       - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/deal-service
# #       - KAFKA_BROKER=kafka:9092
# #       - JWT_SECRET=${JWT_SECRET}
# #     depends_on:
# #       - postgres
# #       - kafka

# #   postgres:
# #     image: postgres:13
# #     environment:
# #       - POSTGRES_USER=postgres
# #       - POSTGRES_PASSWORD=postgres
# #       - POSTGRES_DB=deal-service
# #     ports:
# #       - "5432:5432"
# #     volumes:
# #       - postgres_data:/var/lib/postgresql/data

# #   zookeeper:
# #     image: confluentinc/cp-zookeeper:7.0.0
# #     environment:
# #       ZOOKEEPER_CLIENT_PORT: 2181
# #       ZOOKEEPER_TICK_TIME: 2000

# #   kafka:
# #     image: confluentinc/cp-kafka:7.0.0
# #     depends_on:
# #       - zookeeper
# #     ports:
# #       - "9092:9092"
# #     environment:
# #       KAFKA_BROKER_ID: 1
# #       KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
# #       KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
# #       KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
# #       KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
# #       KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
# #       KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'

# # volumes:
# #   postgres_data: